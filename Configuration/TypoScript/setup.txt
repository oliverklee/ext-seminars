# make the FE plugin work with sb_accessiblecontent
tt_content.list.20.seminars_pi1 =< plugin.tx_seminars_pi1

# Non-frontend specific configuration, e.g., for emails, the CSV export or the BE.
plugin.tx_seminars {
    # Do not copy this variable into your TS setup! This is needed for checking whether this static template has been included correctly.
    isStaticTemplateLoaded = 1

    # Set this to 0 if you don't use the registration feature for this site and would like to disable the configuration check for this.
    enableRegistration = 1

    # whether the registration collision check should be skipped for all events
    skipRegistrationCollisionCheck = 0

    # location of the template file
    templateFile = EXT:seminars/Resources/Private/Templates/Mail/e-mail.html

    # whether to use formal or informal language
    salutation = formal

    # comma-separated list of section names that shouldn't be displayed in the thank-you e-mail to the user
    hideFieldsInThankYouMail = credit_points,billing_address,kids,planned_disclaimer

    # the CSS file for the HTML e-mail to the attendees
    cssFileForAttendeeMail = EXT:seminars/Resources/Private/CSS/thankYouMail.css

    # whether to use the label "Price" for the standard price (instead of "standard price") in e-mail to the participant
    generalPriceInMail = 0

    # Comma-separated list of section names from the registration that shouldn't be displayed in the notification e-mail to the organizers. These fields are the big blocks in that e-mail, and some are further divided.
    hideFieldsInNotificationMail =

    # comma-separated list of field names from seminars that should be mentioned in the notification e-mail to the organizers (in the "seminardata" section)
    showSeminarFieldsInNotificationMail = title,uid,event_type,date,place,price_regular,price_regular_early,price_special,price_special_early,attendees,vacancies,enough_attendees,is_full

    # comma-separated list of field names from fe_users that should be mentioned in the notification e-mail to the organizers  (in the "feuserdata" section)
    showFeUserFieldsInNotificationMail = username,name,email,address,zip,city,telephone

    # comma-separated list of field names from attendances that should be mentioned in the notification e-mail to the organizers  (in the "attendancedata" section)
    showAttendanceFieldsInNotificationMail = uid,price,seats,total_price,method_of_payment,gender,name,address,zip,city,country,telephone,email,interests,expectations,background_knowledge,known_from,notes

    # Whether to send the additional notification e-mails to the organizers or not. Additional notification mails are sent if for example an event gets full.
    sendAdditionalNotificationEmails = 1

    # Whether to send a notification to the organizers if a user has registered.
    sendNotification = 1

    # Whether to send a notification to the organizers if a user has unregistered.
    sendNotificationOnUnregistration = 1

    # Whether to send a notification to the organizers if someone registered for the queue.
    sendNotificationOnRegistrationForQueue = 1

    # Whether to send a notification to the organizers if the queue has been updated.
    sendNotificationOnQueueUpdate = 1

    # Whether to send a confirmation to the user after the user has registered.
    sendConfirmation = 1

    # Whether to send a confirmation to the user if the user has unregistered.
    sendConfirmationOnUnregistration = 1

    # Whether to send a confirmation to the user if the user has registered for the queue.
    sendConfirmationOnRegistrationForQueue = 1

    # Whether to send a confirmation to the user if the queue has been updated.
    sendConfirmationOnQueueUpdate = 1

    # Whether to add the CSV file of the registrations when sending the reminder e-mails to the organizers.
    addRegistrationCsvToOrganizerReminderMail = 0

    # the time format (in strftime format)
    timeFormat = %H:%M

    # the strftime format code to extract the year from a date string
    dateFormatY = %Y

    # the strftime format code to extract the month from a date string
    dateFormatM = %m.

    # the strftime format code to extract the day of month from a date string
    dateFormatD = %d.

    # the strftime format code for the full date
    dateFormatYMD = %d.%m.%Y

    # the strftime format code for the month and day of month
    dateFormatMD = %d.%m.

    # whether date ranges should be shortened when possible
    abbreviateDateRanges = 1

    # time zone used for the iCal attachments in case an event does not have a specific time zone set
    defaultTimeZone = Europe/Berlin

    # ISO 4217 alpha 3 code of the currency to be used, must be valid
    currency = EUR

    # whether to also show the time of the registration deadline
    showTimeOfRegistrationDeadline = 0

    # whether to also show the time of the early bird deadline
    showTimeOfEarlyBirdDeadline = 0

    # whether to also show the time of the unregistration deadline
    showTimeOfUnregistrationDeadline = 0

    # Number of days before the start of an event until unregistration is possible. (If you want to disable this feature, just leave this value empty.)
    unregistrationDeadlineDaysBeforeBeginDate =

    # whether registration should be possible even if an event has already started
    allowRegistrationForStartedEvents = 0

    # whether registration for events without a date should be possible
    allowRegistrationForEventsWithoutDate = 0

    # Whether unregistration is possible even when there are no registrations
    # on the waiting list yet.
    allowUnregistrationWithEmptyWaitingList = 0

    # If there are at least this many vancancies, "enough" is displayed instead of the exact number.
    showVacanciesThreshold = 10

    # whether events that have no standard price set should have "to be announced" as price instead of "free"
    showToBeAnnouncedForEmptyPrice = 0

    # The charset for the CSV export, e.g., utf-8, iso-8859-1 or iso-8859-15.
    # The default is iso-9959-15 because Excel has problems with importing utf-8.
    charsetForCsv = iso-8859-15

    # the filename proposed for CSV export of event lists
    filenameForEventsCsv = events.csv

    # the filename proposed for CSV export of registration lists
    filenameForRegistrationsCsv = registrations.csv

    # comma-separated list of field names from tx_seminars_seminars that will be used for CSV export
    fieldsFromEventsForCsv = uid,title,subtitle,description,event_type,date,time,place,room,speakers,price_regular,attendees,attendees_max,vacancies,is_full

    # comma-separated list of field names from fe_users that will be used for CSV export
    fieldsFromFeUserForCsv = name,company,address,zip,city,country,telephone,email

    # comma-separated list of field names from tx_seminars_attendances that will be used for CSV export
    fieldsFromAttendanceForCsv = uid,price,total_price,method_of_payment,interests,expectations,background_knowledge,known_from,notes

    # whether to show attendances on the registration queue in the CSV export or not
    showAttendancesOnRegistrationQueueInCSV = 0

    # comma-separated list of field names from fe_users that will be used for CLI CSV export
    fieldsFromFeUserForEmailCsv = name,company,address,zip,city,country,telephone,email

    # comma-separated list of field names from tx_seminars_attendances that will be used for CLI CSV export
    fieldsFromAttendanceForEmailCsv = uid,price,total_price,method_of_payment,interests,expectations,background_knowledge,known_from,notes

    # whether to show attendances on the registration queue in the CLI CSV export or not
    showAttendancesOnRegistrationQueueInEmailCsv = 0

    # whether to add the Excel-specific "sep=;" line to the CSV
    addExcelSpecificSeparatorLineToCsv = 0

    # whether to send a cancelation deadline reminder to the organizers
    sendCancelationDeadlineReminder = 0

    # how many days before an events' begin date the organizers should be reminded about this event via e-mail, zero disables the reminder
    sendEventTakesPlaceReminderDaysBeforeBeginDate = 0

    # The following variables don't have any default values provided.
    # You need to set them yourself for this extension to work correctly.

    # PID of the sysfolder where event registrations (attendances) will be stored
    attendancesPID =
}

# Front-end specific configuration.
plugin.tx_seminars_pi1 {
    # Do not copy this variable into your TS setup! This is needed for checking whether this static template has been included correctly.
    isStaticTemplateLoaded = 1

    # Set this to 0 if you don't use the registration feature for this site and would like to disable the configuration check for this.
    enableRegistration = 1

    # number of clicks to registration (valid options are 2 or 3)
    numberOfClicksForRegistration = 3

    # location of the HTML template file
    templateFile = EXT:seminars/Resources/Private/Templates/FrontEnd/FrontEnd.html

    # activate Javascript framework from global config
    loadJsFramework =< config.loadJsFramework

    # location of the front-end event editor template file
    eventEditorTemplateFile = EXT:seminars/Resources/Private/Templates/FrontEnd/EventEditor.html

    # location of the template file for the registration form
    registrationEditorTemplateFile = EXT:seminars/Resources/Private/Templates/FrontEnd/RegistrationEditor.html

    # the strftime format code for the full date
    dateFormatYMD < plugin.tx_seminars.dateFormatYMD

    # whether to use formal or informal language
    salutation = formal

    # the PID of a fixed event that should be shown in a detailed view
    showSingleEvent =

    # the time-frame from which events should be displayed in the list view
    timeframeInList = currentAndUpcoming

    # comma-separated list of column names that shouldn't be displayed in the list view, e.g. organizers,price_special
    hideColumns = image,category,subtitle,event_type,accreditation_number,credit_points,teaser,time,expiry,place,city,country,price_special,speakers,language,target_groups,attached_files,status

    # comma-separated list of field names that shouldn't be displayed in the detail view, e.g. organizers,price_special
    hideFields = credit_points,eventsnextday

    # whether the option boxes in the selector widget contain an empty entry like "not selected"
    showEmptyEntryInOptionLists = 0

    # comma-separated list of search options which should be shown in the search widget.
    displaySearchFormFields =

    # how many years are displayed in the date filter
    numberOfYearsInDateFilter = 2

    # whether the page browser should be hidden in list view
    hidePageBrowser = 0

    # whether canceled events should be hidden or not
    hideCanceledEvents = 0

    # comma-separated list of event types UIDs to filter the list view for,
    # leave empty to have no such filter
    limitListViewToEventTypes =

    # comma-separated list of category UIDs to filter the list view for, leave
    # empty to have no such filter
    limitListViewToCategories =

    # comma-separated list of place UIDs to filter the list view for, leave
    # empty to have no such filter
    limitListViewToPlaces =

    # comma-separated list of organizer UIDs to filter the list view for, leave
    # empty to have no such filter
    limitListViewToOrganizers =

    # whether to show only events with vacancies on in the list view
    showOnlyEventsWithVacancies = 0

    # the maximum height of the image of a seminar in the list view
    seminarImageListViewHeight = 43

    # the maximum width of the image of a seminar in the list view
    seminarImageListViewWidth = 70

    # whether the list view should always be sorted by category (before applying
    # the normal sorting)
    sortListViewByCategory = 0

    # how to display the categories in the event list view: icon, text, both
    categoriesInListView = both

    # whether to use the label "Price" as column header for the standard price (instead of "Standard price")
    generalPriceInList = 0

    # whether to use the label "Price" as heading for the standard price (instead of "Standard price") in the detailed view and on the registration page
    generalPriceInSingle = 0

    # whether to omit the date in the list view if it is the same as the previous item's
    omitDateIfSameAsPrevious = 0

    # whether to show the owner data in the single view
    showOwnerDataInSingleView = 0

    # the maximum width of the owner picture in the single view
    ownerPictureMaxWidth = 250

    # who is allowed to view the list of registrations on the front end:
    # "attendees_and_managers", "login" or "world"
    accessToFrontEndRegistrationLists = attendees_and_managers

    # whether to allow the CSV export in the "my VIP events" view
    allowCsvExportOfRegistrationsInMyVipEventsView = 0

    # whether managers may edit their events
    mayManagersEditTheirEvents = 0

    # list of comma-separated names of event fields that should be displayed on the registration page (the order doesn't matter)
    eventFieldsOnRegistrationPage = title,price_regular,price_special,vacancies

    # list of tx_seminars_attendances DB fields to show for the online registration (must not be empty)
    showRegistrationFields = step_counter,price,method_of_payment,lodgings,foods,checkboxes,interests,expectations,background_knowledge,known_from,notes,total_price,feuser_data,billing_address,registration_data,terms_2

    # whether the logged-in user should be registered themselves by default in the registration form (only applicable if the checkbox is hidden)
    registerThemselvesByDefaultForHiddenCheckbox = 1

    # fe_users DB fields to show for in the registration form
    showFeUserFieldsInRegistrationForm = name,company,address,zip,city,country,telephone,email

    # fe_users DB fields on the registration form that should be displayed with a label
    showFeUserFieldsInRegistrationFormWithLabel = telephone,email

    # the displayed number of the first registration page (for "step x of y")
    numberOfFirstRegistrationPage = 1

    # the displayed number of the last registration page (for "step x of y")
    numberOfLastRegistrationPage = 2

    # the maximum number of seats that can be booked in one registration
    maximumBookableSeats = 10

    # whether detailed information for the speakers is shown in the single view
    showSpeakerDetails = 1

    # whether detailed information for the locations is shown in the single view
    showSiteDetails = 1

    # whether file downloads are limited to attendees only
    limitFileDownloadToAttendees = 1

    # comma-separated list of FEuser fields to show in the list of registrations for an event
    showFeUserFieldsInRegistrationsList = name

    # comma-separated list of registration fields to show in the list of registrations for an event
    showRegistrationFieldsInRegistrationList =

    # whether one-time FE users will be automatically logged out after registering for an event
    logOutOneTimeAccountsAfterRegistration = 1

    # whether to add sorting links to the headers in the list view
    enableSortingLinksInListView = 1

    # when to link to the single view: always, never, onlyForNonEmptyDescription
    linkToSingleView = always

    # whether to send an additional notification e-mail from the FE editor to the reviewers when a new record has been created
    sendAdditionalNotificationEmailInFrontEndEditor = 0

    # The following variables don't have any default values provided.
    # You need to set them yourself for this extension to work correctly.

    # PID of the sysfolder that contains all the event records (e.g., the starting point)
    pages =

    # number of levels to recurse when accessing the starting point
    recursive =

    # PID of the FE page that contains the event list
    listPID =

    # PID of the FE page that contains the single view
    detailPID =

    # PID of the FE page that contains the "my events" list
    myEventsPID =

    # PID of the FE page that contains the seminar registration plug-in
    registerPID =

    # PID of the thank-you page that will be displayed after a FE user has registered for an event
    thankYouAfterRegistrationPID =

    # whether to send GET parameters to the thank-you-after-registration-page-URL
    sendParametersToThankYouAfterRegistrationPageUrl = 1

    # PID of the page that will be displayed after a FE user has unregistered from an event
    pageToShowAfterUnregistrationPID =

    # Whether to send GET parameters to the thank-you-after-registration-page-URL.
    sendParametersToPageToShowAfterUnregistrationUrl = 1

    # whether to create FE user records for additional attendees (in addition
    # to storing them in a text field)
    createAdditionalAttendeesAsFrontEndUsers = 0

    # UID of the sys folder in which FE users created as additional attendees in
    # the registration form get stored
    sysFolderForAdditionalAttendeeUsersPID =

    # comma-separated list of front-end user group UIDs to which the FE users
    # created in the registration form will be assigned
    userGroupUidsForAdditionalAttendeesFrontEndUsers =

    # PID of the FE page that contains the login form or onetimeaccount
    loginPID =

    # PID of the page that contains the registrations list for participants
    registrationsListPID =

    # PID of the page that contains the registrations list for event managers
    registrationsVipListPID =

    # UID of the FE user group that is allowed to enter and edit event records in the FE
    eventEditorFeGroupID =

    # UID of the FE user group for event managers
    defaultEventVipsFeGroupID =

    # PID of the page where the plug-in for editing events is located
    eventEditorPID =

    # PID of the sysfolder where FE-created events will be stored
    createEventsPID =

    # PID of the sysfolder where FE-created auxiliary records will be stored
    createAuxiliaryRecordsPID =

    # PID of the page that will be shown when an event has been successfully entered on the FE
    eventSuccessfullySavedPID =

    # comma-separated list of file extensions which are allowed to be uploaded
    allowedExtensionsForUpload = jpg,jpeg,png,bmp,gif,tiff,tif,txt,pdf,ps,svg,doc,docx,sxw,odt,xls,xlsx,sxc,ods,ppt,pptx,sxi,odp,html,htm,css,js,xml,xsd,zip,rar,gz,tgz,tar,bz2,tbz,tbz2

    # comma-separated list of the fields to show in the FE-editor
    displayFrontEndEditorFields = subtitle,accreditation_number,credit_points,categories,event_type,cancelled,teaser,description,additional_information,begin_date,end_date,begin_date_registration,deadline_early_bird,deadline_registration,needs_registration,allows_multiple_registrations,queue_size,offline_attendees,attendees_min,attendees_max,target_groups,price_regular,price_regular_early,price_regular_board,price_special,price_special_early,price_special_board,payment_methods,place,room,lodgings,foods,speakers,leaders,partners,tutors,checkboxes,uses_terms_2,attached_file_box,notes

    # comma-separated list of the event fields which are required to be filled in the FE editor
    requiredFrontEndEditorFields =

    # comma-separated list of the place fields which are required to be filled in the FE editor
    requiredFrontEndEditorPlaceFields = city

    # UID of the payment method that corresponds to "bank transfer"
    bankTransferUID =

    # The target for external links in seminars.
    externalLinkTarget =

    # the maximum width of the image of a seminar in the single view
    seminarImageSingleViewWidth = 260

    # the maximum height of the image of a seminar in the single view
    seminarImageSingleViewHeight = 160

    # whether to allow front-end editing of speakers
    allowFrontEndEditingOfSpeakers = 0

    # whether to allow front-end editing of places
    allowFrontEndEditingOfPlaces = 0

    # whether to allow front-end editing of checkboxes
    allowFrontEndEditingOfCheckboxes = 0

    # whether to allow front-end editing of target groups
    allowFrontEndEditingOfTargetGroups = 0

    # location of language file for substitution of LABEL markers
    locallangFilename = EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf

    form =< config.tx_mkforms
    form {
        eventEditor {
            meta {
                name = Seminar Manager FE Editor
                description = This editor provides a FE editing feature for events.
                form.formid = tx_seminars_pi1_seminars
                debug = false
                displaylabels = false
                codeBehind {
                    name = eventeditor
                    path = this
                }
            }

            control {
                datahandler = datahandler:DBMM
                datahandler {
                    tablename = tx_seminars_seminars
                    keyname = uid
                    labelname = title
                    mmrelations {
                        categories {
                            field = categories
                            mmtable = tx_seminars_seminars_categories_mm
                        }

                        place {
                            field = place
                            mmtable = tx_seminars_seminars_place_mm
                        }

                        lodgings {
                            field = lodgings
                            mmtable = tx_seminars_seminars_lodgings_mm
                        }

                        foods {
                            field = foods
                            mmtable = tx_seminars_seminars_foods_mm
                        }

                        speakers {
                            field = speakers
                            mmtable = tx_seminars_seminars_speakers_mm
                        }

                        partners {
                            field = partners
                            mmtable = tx_seminars_seminars_speakers_mm_partners
                        }

                        tutors {
                            field = tutors
                            mmtable = tx_seminars_seminars_speakers_mm_tutors
                        }

                        leaders {
                            field = leaders
                            mmtable = tx_seminars_seminars_speakers_mm_leaders
                        }

                        target_groups {
                            field = target_groups
                            mmtable = tx_seminars_seminars_target_groups_mm
                        }

                        payment_methods {
                            field = payment_methods
                            mmtable = tx_seminars_seminars_payment_methods_mm
                        }

                        organizers {
                            field = organizers
                            mmtable = tx_seminars_seminars_organizers_mm
                        }
                    }

                    process.beforeinsertion.userobj {
                        extension = this
                        method = modifyDataToInsert
                    }
                }

                datasources {
                    listSpeakers = datasource:PHPARRAY
                    listSpeakers {
                        name = listSpeakers
                        bindsto {
                            exec = eventeditor.populateListSpeakers
                            params {
                                10.name = type
                                10.value = Speaker
                                20.name = lister
                                20.value = 1
                            }
                        }
                    }
                }

                renderer = renderer:TEMPLATE
                renderer.template {
                    path.userobj.php (
                        return \Tx_Oelib_ConfigurationRegistry::get('plugin.tx_seminars_pi1')->getAsString('eventEditorTemplateFile');
                    )
                    subpart = ###seminars_FORM###
                    errortag = errors
                }

                actionlets {
                    10 = actionlet:USEROBJ
                    10.userobj {
                        extension = this
                        method = sendEMailToReviewer
                    }

                    20 = actionlet:USEROBJ
                    20.userobj {
                        extension = this
                        method = sendAdditionalNotificationEmailToReviewer
                    }

                    30 = actionlet:REDIRECT
                    30.url.userobj {
                        extension = this
                        method = getEventSuccessfullySavedUrl
                    }
                }
            }

            elements {
                title = renderlet:TEXT
                title {
                    name = title
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.title
                    validators {
                        10 = validator:STANDARD
                        10.required.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyTitle
                    }
                }

                subtitle = renderlet:TEXT
                subtitle {
                    name = subtitle
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.subtitle
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptySubtitle
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = subtitle
                            }
                        }
                    }
                }

                categories = renderlet:CHECKBOX
                categories {
                    name = categories
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.categories
                    class = tx-seminars-pi1-event-editor-checkbox
                    data.userobj {
                        extension = this
                        method = populateListCategories
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noCategoryChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = categories
                            }
                        }
                    }
                }

                teaser = renderlet:TEXTAREA
                teaser {
                    name = teaser
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.teaser
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyTeaser
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = teaser
                            }
                        }
                    }
                }

                description = renderlet:TEXTAREA
                description {
                    name = description
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.description
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyDescription
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = description
                            }
                        }
                    }
                }

                event_type = renderlet:LISTBOX
                event_type {
                    name = event_type
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.event_type
                    data {
                        items {
                            item {
                                caption =
                                value = 0
                            }
                        }

                        userobj {
                            extension = this
                            method = populateListEventTypes
                        }
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noEventTypeChosen
                        10.custom.userobj {
                            extension = this
                            method = validateInteger
                            params {
                                10.name = elementName
                                10.value = event_type
                            }
                        }
                    }
                }

                accreditation_number = renderlet:TEXT
                accreditation_number {
                    name = accreditation_number
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.accreditation_number
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_accreditationNumberZero
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = accreditation_number
                            }
                        }
                    }
                }

                credit_points = renderlet:TEXT
                credit_points {
                    name = credit_points
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.credit_points
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_creditPointsZero
                        10.custom.userobj {
                            extension = this
                            method = validateInteger
                            params {
                                10.name = elementName
                                10.value = credit_points
                            }
                        }
                    }
                }

                begin_date = renderlet:DATE
                begin_date {
                    name = begin_date
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.begin_date
                    data.datetime {
                        format = %H:%M %d-%m-%Y
                        displaytime = true
                        converttotimestamp = true
                        allowmanualedition = true
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidBeginDate
                        10.custom.userobj {
                            extension = this
                            method = validateDate
                            params {
                                10.name = elementName
                                10.value = begin_date
                            }
                        }
                    }
                }

                end_date = renderlet:DATE
                end_date {
                    name = end_date
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.end_date
                    data.datetime {
                        format = %H:%M %d-%m-%Y
                        displaytime = true
                        converttotimestamp = true
                        allowmanualedition = true
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidEndDate
                        10.custom.userobj {
                            extension = this
                            method = validateDate
                            params {
                                10.name = elementName
                                10.value = end_date
                            }
                        }
                    }
                }

                begin_date_registration = renderlet:DATE
                begin_date_registration {
                    name = begin_date_registration
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.begin_date_registration
                    data.datetime {
                        format = %H:%M %d-%m-%Y
                        displaytime = true
                        converttotimestamp = true
                        allowmanualedition = true
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidBeginDateRegistration
                        10.custom.userobj {
                            extension = this
                            method = validateDate
                            params {
                                10.name = elementName
                                10.value = begin_date_registration
                            }
                        }
                    }
                }

                deadline_registration = renderlet:DATE
                deadline_registration {
                    name = deadline_registration
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.deadline_registration
                    data.datetime {
                        format = %H:%M %d-%m-%Y
                        displaytime = true
                        converttotimestamp = true
                        allowmanualedition = true
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidDeadlineRegistration
                        10.custom.userobj {
                            extension = this
                            method = validateDate
                            params {
                                10.name = elementName
                                10.value = deadline_registration
                            }
                        }
                    }
                }

                deadline_early_bird = renderlet:DATE
                deadline_early_bird {
                    name = deadline_early_bird
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.deadline_early_bird
                    data.datetime {
                        format = %H:%M %d-%m-%Y
                        displaytime = true
                        converttotimestamp = true
                        allowmanualedition = true
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidDeadlineEarlyBird
                        10.custom.userobj {
                            extension = this
                            method = validateDate
                            params {
                                10.name = elementName
                                10.value = deadline_early_bird
                            }
                        }
                    }
                }

                deadline_unregistration = renderlet:DATE
                deadline_unregistration {
                    name = deadline_unregistration
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.deadline_unregistration
                    data.datetime {
                        format = %H:%M %d-%m-%Y
                        displaytime = true
                        converttotimestamp = true
                        allowmanualedition = true
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidDeadlineUnregistration
                        10.custom.userobj {
                            extension = this
                            method = validateDate
                            params {
                                10.name = elementName
                                10.value = deadline_unregistration
                            }
                        }
                    }
                }

                place = renderlet:CHECKBOX
                place {
                    name = place
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.place
                    class = tx-seminars-pi1-event-editor-checkbox
                    wrapitem = <tr><td>|</td></tr>
                    wrap = <table class="checkboxTable" summary=""><tbody>|</tbody></table>
                    separator =
                    data.userobj {
                        extension = this
                        method = populateListPlaces
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noPlaceChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = place
                            }
                        }
                    }
                }

                newPlaceButton = renderlet:BUTTON
                newPlaceButton {
                    name = newPlaceButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:newPlaceButton
                    process.userobj {
                        extension = this
                        method = isFrontEndEditingOfRelatedRecordsAllowed
                        params {
                            10.name = relatedRecordType
                            10.value = Places
                        }
                    }

                    onclick {
                        runat = ajax
                        cache = false
                        userobj.php (
                            $this->getRenderer()->_setDisplayLabels(true);
                            $result = $this->aORenderlets['newPlaceModalBox']->majixShowFreshBox();
                            $this->getRenderer()->_setDisplayLabels(false);
                            return $result;
                        )
                    }
                }

                newPlaceModalBox = renderlet:MODALBOX
                newPlaceModalBox {
                    name = newPlaceModalBox
                    childs {
                        newPlace_title = renderlet:TEXT
                        newPlace_title {
                            name = newPlace_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.title
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_address = renderlet:TEXTAREA
                        newPlace_address {
                            name = newPlace_address
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.address
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_zip = renderlet:TEXT
                        newPlace_zip {
                            name = newPlace_zip
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.zip
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_city = renderlet:TEXT
                        newPlace_city {
                            name = newPlace_city
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.city
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_country = renderlet:LISTBOX
                        newPlace_country {
                            name = newPlace_country
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.country
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                            data {
                                items {
                                    10.caption =
                                    10.value = 0
                                }

                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::populateListCountries();
                                )
                            }
                        }

                        newPlace_homepage = renderlet:TEXT
                        newPlace_homepage {
                            name = newPlace_homepage
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.homepage
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_directions = renderlet:TEXTAREA
                        newPlace_directions {
                            name = newPlace_directions
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.directions
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_notes = renderlet:TEXTAREA
                        newPlace_notes {
                            name = newPlace_notes
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.notes
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newPlace_cancelButton = renderlet:BUTTON
                        newPlace_cancelButton {
                            name = newPlace_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['newPlaceModalBox']->majixCloseBox();
                                )
                            }
                        }

                        newPlace_saveButton = renderlet:BUTTON
                        newPlace_saveButton {
                            name = newPlace_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                cache = false
                                params = newPlace_title, newPlace_address, newPlace_zip, newPlace_city, newPlace_country, newPlace_homepage, newPlace_directions, newPlace_notes
                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::createNewPlace($this);
                                )
                            }
                        }
                    }
                }

                editPlaceButton = renderlet:BUTTON
                editPlaceButton {
                    name = editPlaceButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_edit
                    class = tx-seminars-pi1-event-editor-edit-button
                    onclick {
                        runat = ajax
                        cache = false
                        userobj.php (
                            return tx_seminars_FrontEnd_EventEditor::showEditPlaceModalBox($this);
                        )
                    }
                }

                editPlaceModalBox = renderlet:MODALBOX
                editPlaceModalBox {
                    name = editPlaceModalBox
                    childs {
                        editPlace_title = renderlet:TEXT
                        editPlace_title {
                            name = editPlace_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.title
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_address = renderlet:TEXTAREA
                        editPlace_address {
                            name = editPlace_address
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.address
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_zip = renderlet:TEXT
                        editPlace_zip {
                            name = editPlace_zip
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.zip
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_city = renderlet:TEXT
                        editPlace_city {
                            name = editPlace_city
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.city
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_country = renderlet:LISTBOX
                        editPlace_country {
                            name = editPlace_country
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.country
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                            data {
                                items {
                                    10.caption =
                                    10.value = 0
                                }

                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::populateListCountries();
                                )
                            }
                        }

                        editPlace_homepage = renderlet:TEXT
                        editPlace_homepage {
                            name = editPlace_homepage
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.homepage
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_directions = renderlet:TEXTAREA
                        editPlace_directions {
                            name = editPlace_directions
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.directions
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_notes = renderlet:TEXTAREA
                        editPlace_notes {
                            name = editPlace_notes
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_sites.notes
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editPlace_uid = renderlet:HIDDEN
                        editPlace_uid {
                            name = editPlace_uid
                        }

                        editPlace_cancelButton = renderlet:BUTTON
                        editPlace_cancelButton {
                            name = editPlace_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['editPlaceModalBox']->majixCloseBox();
                                )
                            }
                        }

                        editPlace_saveButton = renderlet:BUTTON
                        editPlace_saveButton {
                            name = editPlace_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                cache = false
                                params = editPlace_title, editPlace_address, editPlace_zip, editPlace_city, editPlace_country, editPlace_homepage, editPlace_directions, editPlace_notes, editPlace_uid
                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::updatePlace($this);
                                )
                            }
                        }
                    }
                }

                room = renderlet:TEXT
                room {
                    name = room
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.room
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyRoom
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = room
                            }
                        }
                    }
                }

                lodgings = renderlet:CHECKBOX
                lodgings {
                    name = lodgings
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.lodgings
                    class = tx-seminars-pi1-event-editor-checkbox
                    data.userobj {
                        extension = this
                        method = populateListLodgings
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noLodgingsChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = lodgings
                            }
                        }
                    }
                }

                foods = renderlet:CHECKBOX
                foods {
                    name = foods
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.foods
                    class = tx-seminars-pi1-event-editor-checkbox
                    data.userobj {
                        extension = this
                        method = populateListFoods
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noFoodsChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = foods
                            }
                        }
                    }
                }

                speakers = renderlet:LISTER
                speakers {
                    name = speakers
                    label = LLL:EXT:seminars/locallang_db.xlf:tx_seminars_seminars.speakers
                    uidColumn = uid
                    usegp = 0
                    datasource.use = listSpeakers
                    # disable the pager, list all speakers
                    pager.rows.perpage = -1
                    columns {
                        uid {
                            name = uid
                            type = renderlet:HIDDEN
                        }

                        selected {
                            name = selected
                            type = renderlet:CHECKSINGLE
                            activelistable = true
                        }

                        name {
                            name = name
                            type = renderlet:TEXT
                        }

                        edit {
                            name = edit
                            type = renderlet:BUTTON
                            label = LLL:label_edit
                            visible.userobj.php = return !$this->getCurrentRdt() || $this->getCurrentRdt()->getValue();
                            onclick {
                                runat = ajax
                                params = rowData::uid
                                cache = false
                                exec = eventeditor.openEditSpeakerModalBox()
                            }
                        }
                    }
                }

                newSpeakerButton = renderlet:BUTTON
                newSpeakerButton {
                    name = newSpeakerButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:newSpeakerButton
                    process.userobj {
                        extension = this
                        method = isFrontEndEditingOfRelatedRecordsAllowed
                        params {
                            10.name = relatedRecordType
                            10.value = Speakers
                        }
                    }

                    onclick {
                        runat = ajax
                        userobj.php (
                            $this->getRenderer()->_setDisplayLabels(true);
                            $result = $this->aORenderlets['newSpeakerModalBox']->majixShowFreshBox();
                            $this->getRenderer()->_setDisplayLabels(false);
                            return $result;
                        )
                    }
                }

                newLeaderButton < .newSpeakerButton
                newLeaderButton.name = newLeaderButton

                newPartnerButton < .newSpeakerButton
                newPartnerButton.name = newPartnerButton

                newTutorButton < .newSpeakerButton
                newTutorButton.name = newTutorButton

                newSpeakerModalBox = renderlet:MODALBOX
                newSpeakerModalBox {
                    name = newSpeakerModalBox
                    childs {
                        newSpeaker_title = renderlet:TEXT
                        newSpeaker_title {
                            name = newSpeaker_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.title
                            wrap = <div class="modalbox-column1"><div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_gender = renderlet:LISTBOX
                        newSpeaker_gender {
                            name = newSpeaker_gender
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.gender
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                            data {
                                items {
                                    10.caption =
                                    10.value = 0
                                    20.caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.gender_male
                                    20.value = 1
                                    30.caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.gender_female
                                    30.value = 2
                                }
                            }
                        }

                        newSpeaker_organization = renderlet:TEXT
                        newSpeaker_organization {
                            name = newSpeaker_organization
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.organization
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_homepage = renderlet:TEXT
                        newSpeaker_homepage {
                            name = newSpeaker_homepage
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.homepage
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_description = renderlet:TEXTAREA
                        newSpeaker_description {
                            name = newSpeaker_description
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.description
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_skills = renderlet:CHECKBOX
                        newSpeaker_skills {
                            name = newSpeaker_skills
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.skills
                            class = tx-seminars-pi1-event-editor-checkbox
                            wrap = <div class="formidable-rdrstd-rdtwrap formidable-checkboxes">|</div></div>
                            data.userobj.php (
                                return tx_seminars_FrontEnd_EventEditor::populateListSkills();
                            )
                        }

                        newSpeaker_notes = renderlet:TEXTAREA
                        newSpeaker_notes {
                            name = newSpeaker_notes
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.notes
                            wrap = <div class="modalbox-column2"><div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_address = renderlet:TEXTAREA
                        newSpeaker_address {
                            name = newSpeaker_address
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.address
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_phone_work = renderlet:TEXT
                        newSpeaker_phone_work {
                            name = newSpeaker_phone_work
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.phone_work
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_phone_home = renderlet:TEXT
                        newSpeaker_phone_home {
                            name = newSpeaker_phone_home
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.phone_home
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_phone_mobile = renderlet:TEXT
                        newSpeaker_phone_mobile {
                            name = newSpeaker_phone_mobile
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.phone_mobile
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_fax = renderlet:TEXT
                        newSpeaker_fax {
                            name = newSpeaker_fax
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.fax
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_email = renderlet:TEXT
                        newSpeaker_email {
                            name = newSpeaker_email
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.email
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newSpeaker_cancelation_period = renderlet:TEXT
                        newSpeaker_cancelation_period {
                            name = newSpeaker_cancelation_period
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.cancelation_period
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div></div>
                        }

                        newSpeaker_cancelButton = renderlet:BUTTON
                        newSpeaker_cancelButton {
                            name = newSpeaker_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['newSpeakerModalBox']->majixCloseBox();
                                )
                            }
                        }

                        newSpeaker_saveButton = renderlet:BUTTON
                        newSpeaker_saveButton {
                            name = newSpeaker_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                params = newSpeakerModalBox__*
                                cache = false
                                exec = eventeditor.createNewSpeaker()
                            }
                        }
                    }
                }

                editSpeakerButton = renderlet:BUTTON
                editSpeakerButton {
                    name = editSpeakerButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_edit
                    class = tx-seminars-pi1-event-editor-edit-button
                    onclick {
                        runat = ajax
                        cache = false
                        userobj.php (
                            return tx_seminars_FrontEnd_EventEditor::showEditSpeakerModalBox($this);
                        )
                    }
                }

                editSpeakerModalBox = renderlet:MODALBOX
                editSpeakerModalBox {
                    name = editSpeakerModalBox
                    childs {
                        editSpeaker_title = renderlet:TEXT
                        editSpeaker_title {
                            name = editSpeaker_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.title
                            wrap = <div class="modalbox-column1"><div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_gender = renderlet:LISTBOX
                        editSpeaker_gender {
                            name = editSpeaker_gender
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.gender
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                            data {
                                items {
                                    10.caption =
                                    10.value = 0
                                    20.caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.gender_male
                                    20.value = 1
                                    30.caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.gender_female
                                    30.value = 2
                                }
                            }
                        }

                        editSpeaker_organization = renderlet:TEXT
                        editSpeaker_organization {
                            name = editSpeaker_organization
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.organization
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_homepage = renderlet:TEXT
                        editSpeaker_homepage {
                            name = editSpeaker_homepage
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.homepage
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_description = renderlet:TEXTAREA
                        editSpeaker_description {
                            name = editSpeaker_description
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.description
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_skills = renderlet:CHECKBOX
                        editSpeaker_skills {
                            name = editSpeaker_skills
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.skills
                            class = tx-seminars-pi1-event-editor-checkbox
                            wrap = <div class="formidable-rdrstd-rdtwrap formidable-checkboxes">|</div></div>
                            data.userobj.php (
                                return tx_seminars_FrontEnd_EventEditor::populateListSkills();
                            )
                        }

                        editSpeaker_notes = renderlet:TEXTAREA
                        editSpeaker_notes {
                            name = editSpeaker_notes
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.notes
                            wrap = <div class="modalbox-column2"><div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_address = renderlet:TEXTAREA
                        editSpeaker_address {
                            name = editSpeaker_address
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.address
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_phone_work = renderlet:TEXT
                        editSpeaker_phone_work {
                            name = editSpeaker_phone_work
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.phone_work
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_phone_home = renderlet:TEXT
                        editSpeaker_phone_home {
                            name = editSpeaker_phone_home
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.phone_home
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_phone_mobile = renderlet:TEXT
                        editSpeaker_phone_mobile {
                            name = editSpeaker_phone_mobile
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.phone_mobile
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_fax = renderlet:TEXT
                        editSpeaker_fax {
                            name = editSpeaker_fax
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.fax
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_email = renderlet:TEXT
                        editSpeaker_email {
                            name = editSpeaker_email
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.email
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editSpeaker_cancelation_period = renderlet:TEXT
                        editSpeaker_cancelation_period {
                            name = editSpeaker_cancelation_period
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_speakers.cancelation_period
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div></div>
                        }

                        editSpeaker_uid = renderlet:HIDDEN
                        editSpeaker_uid {
                            name = editSpeaker_uid
                        }

                        editSpeaker_cancelButton = renderlet:BUTTON
                        editSpeaker_cancelButton {
                            name = editSpeaker_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['editSpeakerModalBox']->majixCloseBox();
                                )
                            }
                        }

                        editSpeaker_saveButton = renderlet:BUTTON
                        editSpeaker_saveButton {
                            name = editSpeaker_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                params = editSpeakerModalBox__*
                                cache = false
                                exec = eventeditor.updateSpeaker()
                            }
                        }
                    }
                }

                partners = renderlet:CHECKBOX
                partners {
                    name = partners
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.partners
                    class = tx-seminars-pi1-event-editor-checkbox
                    wrapitem = <tr><td>|</td></tr>
                    wrap = <table class="checkboxTable" summary=""><tbody>|</tbody></table>
                    separator =
                    data.userobj {
                        extension = this
                        method = populateListSpeakers
                        params {
                            10.name = type
                            10.value = Partner
                        }
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noPartnersChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = partners
                            }
                        }
                    }
                }

                tutors = renderlet:CHECKBOX
                tutors {
                    name = tutors
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.tutors
                    class = tx-seminars-pi1-event-editor-checkbox
                    wrapitem = <tr><td>|</td></tr>
                    wrap = <table class="checkboxTable" summary=""><tbody>|</tbody></table>
                    separator =
                    data.userobj {
                        extension = this
                        method = populateListSpeakers
                        params {
                            10.name = type
                            10.value = Tutor
                        }
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noTutorsChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = tutors
                            }
                        }
                    }
                }

                leaders = renderlet:CHECKBOX
                leaders {
                    name = leaders
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.leaders
                    class = tx-seminars-pi1-event-editor-checkbox
                    wrapitem = <tr><td>|</td></tr>
                    wrap = <table class="checkboxTable" summary=""><tbody>|</tbody></table>
                    separator =
                    data.userobj {
                        extension = this
                        method = populateListSpeakers
                        params {
                            10.name = type
                            10.value = Leader
                        }
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noLeadersChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = leaders
                            }
                        }
                    }
                }

                price_regular = renderlet:TEXT
                price_regular {
                    name = price_regular
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.price_regular
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidPriceRegular
                        10.custom.userobj {
                            extension = this
                            method = validatePrice
                            params {
                                10.name = elementName
                                10.value = price_regular
                            }
                        }
                    }
                }

                price_regular_early = renderlet:TEXT
                price_regular_early {
                    name = price_regular_early
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.price_regular_early
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidPriceRegularEarly
                        10.custom.userobj {
                            extension = this
                            method = validatePrice
                            params {
                                10.name = elementName
                                10.value = price_regular_early
                            }
                        }
                    }
                }

                price_regular_board = renderlet:TEXT
                price_regular_board {
                    name = price_regular_board
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.price_regular_board
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidPriceRegularBoard
                        10.custom.userobj {
                            extension = this
                            method = validatePrice
                            params {
                                10.name = elementName
                                10.value = price_regular_board
                            }
                        }
                    }
                }

                price_special = renderlet:TEXT
                price_special {
                    name = price_special
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.price_special
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidPriceSpecial
                        10.custom.userobj {
                            extension = this
                            method = validatePrice
                            params {
                                10.name = elementName
                                10.value = price_special
                            }
                        }
                    }
                }

                price_special_early = renderlet:TEXT
                price_special_early {
                    name = price_special_early
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.price_special_early
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidPriceSpecialEarly
                        10.custom.userobj {
                            extension = this
                            method = validatePrice
                            params {
                                10.name = elementName
                                10.value = price_special_early
                            }
                        }
                    }
                }

                price_special_board = renderlet:TEXT
                price_special_board {
                    name = price_special_board
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.price_special_board
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidPriceSpecialBoard
                        10.custom.userobj {
                            extension = this
                            method = validatePrice
                            params {
                                10.name = elementName
                                10.value = price_special_board
                            }
                        }
                    }
                }

                additional_information = renderlet:TEXTAREA
                additional_information {
                    name = additional_information
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.additional_information
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyAdditionalInformation
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = additional_information
                            }
                        }
                    }
                }

                checkboxes = renderlet:CHECKBOX
                checkboxes {
                    name = checkboxes
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.checkboxes
                    class = tx-seminars-pi1-event-editor-checkbox
                    wrapitem = <tr><td>|</td></tr>
                    wrap = <table class="checkboxTable" summary=""><tbody>|</tbody></table>
                    separator =
                    data.userobj {
                        extension = this
                        method = populateListCheckboxes
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noCheckboxesChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = checkboxes
                            }
                        }
                    }
                }

                newCheckboxButton = renderlet:BUTTON
                newCheckboxButton {
                    name = newCheckboxButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:newCheckboxButton
                    process.userobj {
                        extension = this
                        method = isFrontEndEditingOfRelatedRecordsAllowed
                        params {
                            10.name = relatedRecordType
                            10.value = Checkboxes
                        }
                    }

                    onclick {
                        runat = ajax
                        cache = false
                        userobj.php (
                            $this->getRenderer()->_setDisplayLabels(true);
                            $result = $this->aORenderlets['newCheckboxModalBox']->majixShowFreshBox();
                            $this->getRenderer()->_setDisplayLabels(false);
                            return $result;
                        )
                    }
                }

                newCheckboxModalBox = renderlet:MODALBOX
                newCheckboxModalBox {
                    name = newCheckboxModalBox
                    childs {
                        newCheckbox_title = renderlet:TEXT
                        newCheckbox_title {
                            name = newCheckbox_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_checkboxes.title
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newCheckbox_cancelButton = renderlet:BUTTON
                        newCheckbox_cancelButton {
                            name = newCheckbox_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['newCheckboxModalBox']->majixCloseBox();
                                )
                            }
                        }

                        newCheckbox_saveButton = renderlet:BUTTON
                        newCheckbox_saveButton {
                            name = newCheckbox_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                cache = false
                                params = newCheckbox_title
                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::createNewCheckbox($this);
                                )
                            }
                        }
                    }
                }

                editCheckboxButton = renderlet:BUTTON
                editCheckboxButton {
                    name = editCheckboxButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_edit
                    class = tx-seminars-pi1-event-editor-edit-button
                    onclick {
                        runat = ajax
                        cache = false
                        userobj.php (
                            return tx_seminars_FrontEnd_EventEditor::showEditCheckboxModalBox($this);
                        )
                    }
                }

                editCheckboxModalBox = renderlet:MODALBOX
                editCheckboxModalBox {
                    name = editCheckboxModalBox
                    childs {
                        editCheckbox_title = renderlet:TEXT
                        editCheckbox_title {
                            name = editCheckbox_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_checkboxes.title
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editCheckbox_uid = renderlet:HIDDEN
                        editCheckbox_uid {
                            name = editCheckbox_uid
                        }

                        editCheckbox_cancelButton = renderlet:BUTTON
                        editCheckbox_cancelButton {
                            name = editCheckbox_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['editCheckboxModalBox']->majixCloseBox();
                                )
                            }
                        }

                        editCheckbox_saveButton = renderlet:BUTTON
                        editCheckbox_saveButton {
                            name = editCheckbox_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                cache = false
                                params = editCheckbox_title, editCheckbox_uid
                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::updateCheckbox($this);
                                )
                            }
                        }
                    }
                }

                payment_methods = renderlet:CHECKBOX
                payment_methods {
                    name = payment_methods
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.payment_methods
                    class = tx-seminars-pi1-event-editor-checkbox
                    data.userobj {
                        extension = this
                        method = populateListPaymentMethods
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noPaymentMethodsChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = payment_methods
                            }
                        }
                    }
                }

                organizers = renderlet:CHECKBOX
                organizers {
                    name = organizers
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.organizers
                    class = tx-seminars-pi1-event-editor-checkbox
                    data {
                        userobj {
                            extension = this
                            method = populateListOrganizers
                        }

                        defaultvalue.userobj {
                            extension = this
                            method = getPreselectedOrganizer
                        }
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyOrganizer
                        10.custom.userobj {
                            php (
                                $value = array_pop(func_get_args());
                                return (!empty($value));
                            )
                        }
                    }
                }

                needs_registration = renderlet:CHECKSINGLE
                needs_registration {
                    name = needs_registration
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.needs_registration
                }

                allows_multiple_registrations = renderlet:CHECKSINGLE
                allows_multiple_registrations {
                    name = allows_multiple_registrations
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.allows_multiple_registrations
                }

                attendees_min = renderlet:TEXT
                attendees_min {
                    name = attendees_min
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.attendees_min
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_attendeesMinZero
                        10.custom.userobj {
                            extension = this
                            method = validateInteger
                            params {
                                10.name = elementName
                                10.value = attendees_min
                            }
                        }
                    }
                }

                attendees_max = renderlet:TEXT
                attendees_max {
                    name = attendees_max
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.attendees_max
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_attendeesMaxZero
                        10.custom.userobj {
                            extension = this
                            method = validateInteger
                            params {
                                10.name = elementName
                                10.value = attendees_max
                            }
                        }
                    }
                }

                queue_size = renderlet:CHECKSINGLE
                queue_size {
                    name = queue_size
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.queue_size
                }

                offline_attendees = renderlet:TEXT
                offline_attendees {
                    name = offline_attendees
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.offline_attendees
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_offlineAttendeesZero
                        10.custom.userobj {
                            extension = this
                            method = validateInteger
                            params {
                                10.name = elementName
                                10.value = offline_attendees
                            }
                        }
                    }
                }

                target_groups = renderlet:CHECKBOX
                target_groups {
                    name = target_groups
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.target_groups
                    class = tx-seminars-pi1-event-editor-checkbox
                    wrapitem = <tr><td>|</td></tr>
                    wrap = <table class="checkboxTable" summary=""><tbody>|</tbody></table>
                    separator =
                    data.userobj {
                        extension = this
                        method = populateListTargetGroups
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noTargetGroupsChosen
                        10.custom.userobj {
                            extension = this
                            method = validateCheckboxes
                            params {
                                10.name = elementName
                                10.value = target_groups
                            }
                        }
                    }
                }

                newTargetGroupButton = renderlet:BUTTON
                newTargetGroupButton {
                    name = newTargetGroupButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:newTargetGroupButton
                    process.userobj {
                        extension = this
                        method = isFrontEndEditingOfRelatedRecordsAllowed
                        params {
                            10.name = relatedRecordType
                            10.value = TargetGroups
                        }
                    }

                    onclick {
                        runat = ajax
                        userobj.php (
                            $this->getRenderer()->_setDisplayLabels(true);
                            $result = $this->aORenderlets['newTargetGroupModalBox']->majixShowFreshBox();
                            $this->getRenderer()->_setDisplayLabels(false);
                            return $result;
                        )
                    }
                }

                newTargetGroupModalBox = renderlet:MODALBOX
                newTargetGroupModalBox {
                    name = newTargetGroupModalBox
                    childs {
                        newTargetGroup_title = renderlet:TEXT
                        newTargetGroup_title {
                            name = newTargetGroup_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_target_groups.title
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newTargetGroup_minimum_age = renderlet:TEXT
                        newTargetGroup_minimum_age {
                            name = newTargetGroup_minimum_age
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_target_groups.minimum_age
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newTargetGroup_maximum_age = renderlet:TEXT
                        newTargetGroup_maximum_age {
                            name = newTargetGroup_maximum_age
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_target_groups.maximum_age
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        newTargetGroup_cancelButton = renderlet:BUTTON
                        newTargetGroup_cancelButton {
                            name = newTargetGroup_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['newTargetGroupModalBox']->majixCloseBox();
                                )
                            }
                        }

                        newTargetGroup_saveButton = renderlet:BUTTON
                        newTargetGroup_saveButton {
                            name = newTargetGroup_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                params = newTargetGroup_title, newTargetGroup_minimum_age, newTargetGroup_maximum_age
                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::createNewTargetGroup($this);
                                )
                            }
                        }
                    }
                }

                editTargetGroupButton = renderlet:BUTTON
                editTargetGroupButton {
                    name = editTargetGroupButton
                    label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_edit
                    class = tx-seminars-pi1-event-editor-edit-button
                    onclick {
                        runat = ajax
                        cache = false
                        userobj.php (
                            return tx_seminars_FrontEnd_EventEditor::showEditTargetGroupModalBox($this);
                        )
                    }
                }

                editTargetGroupModalBox = renderlet:MODALBOX
                editTargetGroupModalBox {
                    name = editTargetGroupModalBox
                    childs {
                        editTargetGroup_title = renderlet:TEXT
                        editTargetGroup_title {
                            name = editTargetGroup_title
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_target_groups.title
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editTargetGroup_uid = renderlet:HIDDEN
                        editTargetGroup_uid {
                            name = editTargetGroup_uid
                        }

                        editTargetGroup_minimum_age = renderlet:TEXT
                        editTargetGroup_minimum_age {
                            name = editTargetGroup_minimum_age
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_target_groups.minimum_age
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editTargetGroup_maximum_age = renderlet:TEXT
                        editTargetGroup_maximum_age {
                            name = editTargetGroup_maximum_age
                            label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_target_groups.maximum_age
                            wrap = <div class="formidable-rdrstd-rdtwrap">|</div>
                        }

                        editTargetGroup_cancelButton = renderlet:BUTTON
                        editTargetGroup_cancelButton {
                            name = editTargetGroup_cancelButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_cancel
                            wrap = <div class="formidable-rdrstd-rdtwrap modalbox-buttons">|
                            onclick {
                                runat = client
                                userobj.php (
                                    return $this->aORenderlets['editTargetGroupModalBox']->majixCloseBox();
                                )
                            }
                        }

                        editTargetGroup_saveButton = renderlet:BUTTON
                        editTargetGroup_saveButton {
                            name = editTargetGroup_saveButton
                            label = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:label_save
                            wrap = |</div>
                            onclick {
                                runat = ajax
                                cache = false
                                params = editTargetGroup_title, editTargetGroup_uid, editTargetGroup_minimum_age, editTargetGroup_maximum_age
                                userobj.php (
                                    return tx_seminars_FrontEnd_EventEditor::updateTargetGroup($this);
                                )
                            }
                        }
                    }
                }

                cancelled = renderlet:LISTBOX
                cancelled {
                    name = cancelled
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.cancelled
                    data.items {
                        10 {
                            caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.cancelled_planned
                            value = 0
                        }

                        20 {
                            caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.cancelled_canceled
                            value = 1
                        }

                        30 {
                            caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.cancelled_confirmed
                            value = 2
                        }
                    }
                }

                uses_terms_2 = renderlet:CHECKSINGLE
                uses_terms_2 {
                    name = uses_terms_2
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.uses_terms_2
                }

                notes = renderlet:TEXTAREA
                notes {
                    name = notes
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.notes
                    validators {
                        10 = validator:STANDARD
                        10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_emptyNotes
                        10.custom.userobj {
                            extension = this
                            method = validateString
                            params {
                                10.name = elementName
                                10.value = notes
                            }
                        }
                    }
                }

                attached_files = renderlet:UPLOAD
                attached_files {
                    name = attached_files
                    label = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_seminars.attached_files
                    data {
                        targetdir = uploads/tx_seminars/
                        multiple = 1
                    }

                    validators {
                        10 = validator:STANDARD
                        10.custom.message.userobj {
                            extension = this
                            method = getFileUploadErrorMessage
                        }

                        10.custom.userobj {
                            extension = this
                            method = checkFile
                        }
                    }
                }

                delete_attached_files = renderlet:HIDDEN
                delete_attached_files {
                    name = delete_attached_files
                    data.defaultvalue =
                }

                submit_and_stay = renderlet:SUBMIT
                submit_and_stay {
                    name = submit_and_stay
                    label = ###LABEL_SAVE###
                    onclick (
                        document.getElementById("tx_seminars_pi1_seminars_proceed_file_upload").value = 1
                    )
                }

                btnsubmit = renderlet:SUBMIT
                btnsubmit {
                    name = btnsubmit
                    label = ###LABEL_SAVE_AND_BACK###
                }

                proceed_file_upload = renderlet:HIDDEN
                proceed_file_upload {
                    name = proceed_file_upload
                }
            }
        }

        registration {
            step1 {
                meta {
                    name = Seminar Manager registration form
                    description = This form allows FE users to register for events.
                    form.formid = tx_seminars_pi1_registration_editor
                    debug = false
                    displaylabels = false
                    minify.enabled = 1
                }

                control {
                    datahandler = datahandler:RAW
                    datahandler.parentcallback = setPage

                    renderer = renderer:TEMPLATE
                    renderer.template {
                        path.userobj.php (
                            return \Tx_Oelib_ConfigurationRegistry::get('plugin.tx_seminars_pi1')->getAsString('registrationEditorTemplateFile');
                        )
                        subpart = ###REGISTRATION_EDITOR_STEP_1###
                        errortag = errors
                    }
                }

                elements {
                    step_counter = renderlet:LABEL
                    step_counter {
                        name = step_counter
                        data.value.userobj {
                            extension = this
                            method = getStepCounter
                        }
                    }

                    price = renderlet:LISTBOX
                    price {
                        name = price
                        data.userobj {
                            extension = this
                            method = populatePrices
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_choosePrice
                            10.custom.userobj {
                                extension = this
                                method = isValidPriceSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = price
                            }
                        }
                    }

                    method_of_payment = renderlet:RADIOBUTTON
                    method_of_payment {
                        name = method_of_payment
                        data {
                            userobj {
                                extension = this
                                method = populateListPaymentMethods
                            }

                            defaultvalue.userobj {
                                extension = this
                                method = getPreselectedPaymentMethod
                            }
                        }

                        wrapitem = |<br/>
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_chooseMethodOfPayment
                            10.custom.userobj {
                                extension = this
                                method = isMethodOfPaymentSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = showMethodsOfPayment
                        }
                    }

                    account_number = renderlet:TEXT
                    account_number {
                        name = account_number
                        data {
                            defaultvalue.userobj {
                                extension = this
                                method = retrieveDataFromSession
                                params {
                                    10.name = key
                                    10.value = account_number
                                }
                            }
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = account_number
                            }
                        }
                    }

                    bank_code = renderlet:TEXT
                    bank_code {
                        name = bank_code
                        data {
                            defaultvalue.userobj {
                                extension = this
                                method = retrieveDataFromSession
                                params {
                                    10.name = key
                                    10.value = bank_code
                                }
                            }
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = bank_code
                            }
                        }
                    }

                    bank_name = renderlet:TEXT
                    bank_name {
                        name = bank_name
                        data {
                            defaultvalue.userobj {
                                extension = this
                                method = retrieveDataFromSession
                                params {
                                    10.name = key
                                    10.value = bank_name
                                }
                            }
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = bank_name
                            }
                        }
                    }

                    account_owner = renderlet:TEXT
                    account_owner {
                        name = account_owner
                        data {
                            defaultvalue.userobj {
                                extension = this
                                method = retrieveDataFromSession
                                params {
                                    10.name = key
                                    10.value = account_owner
                                }
                            }
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = account_owner
                            }
                        }
                    }

                    company = renderlet:TEXT
                    company {
                        name = company
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = company
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = company
                            }
                        }
                    }

                    gender = renderlet:LISTBOX
                    gender {
                        name = gender
                        data {
                            items {
                                10 {
                                    caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_attendances.gender.I.0
                                    value = 0
                                }

                                20 {
                                    caption = LLL:EXT:seminars/Resources/Private/Language/locallang_db.xlf:tx_seminars_attendances.gender.I.1
                                    value = 1
                                }
                            }

                            defaultvalue.userobj {
                                extension = this
                                method = getFeUserData
                                params {
                                    10.name = key
                                    10.value = gender
                                }
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = gender
                            }
                        }
                    }

                    name = renderlet:TEXT
                    name {
                        name = name
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = name
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = name
                            }
                        }
                    }

                    address = renderlet:TEXTAREA
                    address {
                        name = address
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = address
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = address
                            }
                        }
                    }

                    zip = renderlet:TEXT
                    zip {
                        name = zip
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = zip
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = zip
                            }
                        }
                    }

                    city = renderlet:TEXT
                    city {
                        name = city
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = city
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = city
                            }
                        }
                    }

                    country = renderlet:LISTBOX
                    country {
                        name = country
                        data {
                            userobj {
                                extension = this
                                method = populateListCountries
                            }

                            defaultvalue.userobj {
                                extension = this
                                method = getFeUserData
                                params {
                                    10.name = key
                                    10.value = country
                                }
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = country
                            }
                        }
                    }

                    telephone = renderlet:TEXT
                    telephone {
                        name = telephone
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = telephone
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = telephone
                            }
                        }
                    }

                    email = renderlet:TEXT
                    email {
                        name = email
                        data.defaultvalue.userobj {
                            extension = this
                            method = getFeUserData
                            params {
                                10.name = key
                                10.value = email
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = email
                            }
                        }
                    }

                    seats = renderlet:LISTBOX
                    seats {
                        name = seats
                        data {
                            userobj {
                                extension = this
                                method = populateSeats
                            }

                            defaultvalue = 1
                        }

                        validators {
                            10 = validator:PREG
                            10.pattern {
                                value = /^[\d]*$/
                                message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noSeatsNumber
                            }

                            20 = validator:STANDARD
                            20.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidNumberOfSeats
                            20.custom.userobj {
                                extension = this
                                method = canRegisterSeats
                            }

                            30 = validator:STANDARD
                            30.custom.message.userobj {
                                extension = this
                                method = getMessageForSeatsNotMatchingRegisteredPersons
                            }

                            30.custom.userobj {
                                extension = this
                                method = validateNumberOfRegisteredPersons
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = seats
                            }
                        }
                    }

                    registered_themselves = renderlet:CHECKSINGLE
                    registered_themselves {
                        name = registered_themselves
                        data.defaultvalue = 1
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = registered_themselves
                            }
                        }
                    }

                    attendees_names = renderlet:HIDDEN
                    attendees_names {
                        name = attendees_names
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = attendees_names
                            }
                        }
                    }

                    structured_attendees_names = renderlet:HIDDEN
                    structured_attendees_names {
                        name = structured_attendees_names
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidEMailAddress
                            10.custom.userobj {
                                extension = this
                                method = validateAdditionalPersonsEMailAddresses
                            }
                        }
                    }

                    kids = renderlet:LISTBOX
                    kids {
                        name = kids
                        data.items {
                            blank {
                                caption =
                                value = 0
                            }

                            1 {
                                caption = 1
                                value = 1
                            }

                            2 {
                                caption = 2
                                value = 2
                            }

                            3 {
                                caption = 3
                                value = 3
                            }

                            4 {
                                caption = 4
                                value = 4
                            }

                            5 {
                                caption = 5
                                value = 5
                            }
                        }

                        validators {
                            10 = validator:PREG
                            10.pattern {
                                value = /^[\d]*$/
                                message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noKidsNumber
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = kids
                            }
                        }
                    }

                    lodgings = renderlet:CHECKBOX
                    lodgings {
                        name = lodgings
                        data.userobj {
                            extension = this
                            method = populateLodgings
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_selectLodging
                            10.custom.userobj {
                                extension = this
                                method = isLodgingSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasLodgings
                        }
                    }

                    accommodation = renderlet:TEXTAREA
                    accommodation {
                        name = accommodation
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = accommodation
                            }
                        }
                    }

                    foods = renderlet:CHECKBOX
                    foods {
                        name = foods
                        data.userobj {
                            extension = this
                            method = populateFoods
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_selectFood
                            10.custom.userobj {
                                extension = this
                                method = isFoodSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = foods
                            }
                        }
                    }

                    food = renderlet:TEXTAREA
                    food {
                        name = food
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = food
                            }
                        }
                    }

                    checkboxes = renderlet:CHECKBOX
                    checkboxes {
                        name = checkboxes
                        data.userobj {
                            extension = this
                            method = populateCheckboxes
                        }

                        process.userobj {
                            extension = this
                            method = hasCheckboxes
                        }
                    }

                    interests = renderlet:TEXTAREA
                    interests {
                        name = interests
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = interests
                            }
                        }
                    }

                    expectations = renderlet:TEXTAREA
                    expectations {
                        name = expectations
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = expectations
                            }
                        }
                    }

                    background_knowledge = renderlet:TEXTAREA
                    background_knowledge {
                        name = background_knowledge
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = background_knowledge
                            }
                        }
                    }

                    known_from = renderlet:TEXTAREA
                    known_from {
                        name = known_from
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = known_from
                            }
                        }
                    }

                    notes = renderlet:TEXTAREA
                    notes {
                        name = notes
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = notes
                            }
                        }
                    }

                    button_continue = renderlet:SUBMIT
                    button_continue {
                        name = button_continue
                        label = ###LABEL_PROCEED_REGISTRATION###
                    }

                    button_submit = renderlet:SUBMIT
                    button_submit {
                        name = button_submit
                        label = ###LABEL_SUBMIT_REGISTRATION###
                        onclick {
                            runat = server
                            submit = full
                            userobj.php (
                                if ($this->_oParent->getFormCreator()->oDataHandler->_allIsValid()) {
                                    $this->_oParent->currentPageNumber = 2;
                                }
                            )
                        }
                    }

                    next_page = renderlet:PASSTHRU
                    next_page {
                        name = next_page
                        data.value = 1
                    }
                }
            }

            step2 {
                meta {
                    name = Seminar Manager registration form
                    description = This form allows FE users to register for events.
                    form.formid = tx_seminars_pi1_registration_editor
                    debug = false
                    displaylabels = false
                }

                control {
                    datahandler = datahandler:RAW
                    datahandler.parentcallback = processRegistration

                    renderer = renderer:TEMPLATE
                    renderer.template {
                        path.userobj.php (
                            return \Tx_Oelib_ConfigurationRegistry::get('plugin.tx_seminars_pi1')->getAsString('registrationEditorTemplateFile');
                        )
                        subpart = ###REGISTRATION_EDITOR_STEP_2###
                        errortag = errors
                    }

                    actionlets {
                        10 = actionlet:REDIRECT
                        10.url.userobj {
                            extension = this
                            method = getThankYouAfterRegistrationUrl
                        }
                    }
                }

                elements {
                    step_counter = renderlet:LABEL
                    step_counter {
                        name = step_counter
                        data.value.userobj {
                            extension = this
                            method = getStepCounter
                        }
                    }

                    terms = renderlet:CHECKSINGLE
                    terms {
                        name = terms
                        label = ###LABEL_TERMS###
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_acceptTerms
                            10.custom.userobj {
                                extension = this
                                method = isTermsChecked
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = terms
                            }
                        }
                    }

                    terms_2 = renderlet:CHECKSINGLE
                    terms_2 {
                        name = terms_2
                        label = ###LABEL_TERMS_2###
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_acceptTerms2
                            10.custom.userobj {
                                extension = this
                                method = isTerms2CheckedAndEnabled
                            }
                        }

                        process.userobj {
                            extension = this
                            method = isTerms2Enabled
                            params {
                                10.name = elementname
                                10.value = terms_2
                            }
                        }
                    }

                    button_back = renderlet:SUBMIT
                    button_back {
                        name = button_back
                        refresh =
                        label = ###LABEL_BACK_REGISTRATION###
                    }

                    button_submit = renderlet:SUBMIT
                    button_submit {
                        name = button_submit
                        label = ###LABEL_SUBMIT_REGISTRATION###
                    }

                    price = renderlet:HIDDEN
                    price {
                        name = price
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_choosePrice
                            10.custom.userobj {
                                extension = this
                                method = isValidPriceSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = price
                            }
                        }
                    }

                    method_of_payment = renderlet:HIDDEN
                    method_of_payment {
                        name = method_of_payment
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_chooseMethodOfPayment
                            10.custom.userobj {
                                extension = this
                                method = isMethodOfPaymentSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = showMethodsOfPayment
                        }
                    }

                    account_number = renderlet:HIDDEN
                    account_number {
                        name = account_number
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = account_number
                            }
                        }
                    }

                    bank_code = renderlet:HIDDEN
                    bank_code {
                        name = bank_code
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = bank_code
                            }
                        }
                    }

                    bank_name = renderlet:HIDDEN
                    bank_name {
                        name = bank_name
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = bank_name
                            }
                        }
                    }

                    account_owner = renderlet:HIDDEN
                    account_owner {
                        name = account_owner
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_provideBankData
                            10.custom.userobj {
                                extension = this
                                method = hasBankData
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasBankDataFormField
                            params {
                                10.name = elementname
                                10.value = account_owner
                            }
                        }
                    }

                    company = renderlet:HIDDEN
                    company {
                        name = company
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = company
                            }
                        }
                    }

                    gender = renderlet:HIDDEN
                    gender {
                        name = gender
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = gender
                            }
                        }
                    }

                    name = renderlet:HIDDEN
                    name {
                        name = name
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = name
                            }
                        }
                    }

                    address = renderlet:HIDDEN
                    address {
                        name = address
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = address
                            }
                        }
                    }

                    zip = renderlet:HIDDEN
                    zip {
                        name = zip
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = zip
                            }
                        }
                    }

                    city = renderlet:HIDDEN
                    city {
                        name = city
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = city
                            }
                        }
                    }

                    country = renderlet:HIDDEN
                    country {
                        name = country
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = country
                            }
                        }
                    }

                    telephone = renderlet:HIDDEN
                    telephone {
                        name = telephone
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = telephone
                            }
                        }
                    }

                    email = renderlet:HIDDEN
                    email {
                        name = email
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = email
                            }
                        }
                    }

                    seats = renderlet:HIDDEN
                    seats {
                        name = seats
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidNumberOfSeats
                            10.custom.userobj {
                                extension = this
                                method = canRegisterSeats
                            }

                            20 = validator:PREG
                            20.pattern {
                                value = /^[\d]*$/
                                message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noSeatsNumber
                            }

                            30 = validator:STANDARD
                            30.custom.message.userobj {
                                extension = this
                                method = getMessageForSeatsNotMatchingRegisteredPersons
                            }

                            30.custom.userobj {
                                extension = this
                                method = validateNumberOfRegisteredPersons
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = seats
                            }
                        }
                    }

                    registered_themselves = renderlet:HIDDEN
                    registered_themselves {
                        name = registered_themselves
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = registered_themselves
                            }
                        }
                    }

                    attendees_names = renderlet:HIDDEN
                    attendees_names {
                        name = attendees_names
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = attendees_names
                            }
                        }
                    }

                    structured_attendees_names = renderlet:HIDDEN
                    structured_attendees_names {
                        name = structured_attendees_names
                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_invalidEMailAddress
                            10.custom.userobj {
                                extension = this
                                method = validateAdditionalPersonsEMailAddresses
                            }
                        }
                    }

                    kids = renderlet:HIDDEN
                    kids {
                        name = kids
                        validators {
                            10 = validator:PREG
                            10.pattern {
                                value = /^[\d]*$/
                                message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_noKidsNumber
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = kids
                            }
                        }
                    }

                    lodgings = renderlet:CHECKBOX
                    lodgings {
                        name = lodgings
                        data.userobj {
                            extension = this
                            method = populateLodgings
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_selectLodging
                            10.custom.userobj {
                                extension = this
                                method = isLodgingSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasLodgings
                        }
                    }

                    accommodation = renderlet:HIDDEN
                    accommodation {
                        name = accommodation
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = accommodation
                            }
                        }
                    }

                    foods = renderlet:CHECKBOX
                    foods {
                        name = foods
                        data.userobj {
                            extension = this
                            method = populateFoods
                        }

                        validators {
                            10 = validator:STANDARD
                            10.custom.message = LLL:EXT:seminars/Resources/Private/Language/FrontEnd/locallang.xlf:message_selectFood
                            10.custom.userobj {
                                extension = this
                                method = isFoodSelected
                            }
                        }

                        process.userobj {
                            extension = this
                            method = hasFoods
                        }
                    }

                    food = renderlet:HIDDEN
                    food {
                        name = food
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = food
                            }
                        }
                    }

                    checkboxes = renderlet:CHECKBOX
                    checkboxes {
                        name = checkboxes
                        data.userobj {
                            extension = this
                            method = populateCheckboxes
                        }

                        process.userobj {
                            extension = this
                            method = hasCheckboxes
                        }
                    }

                    interests = renderlet:HIDDEN
                    interests {
                        name = interests
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = interests
                            }
                        }
                    }

                    expectations = renderlet:HIDDEN
                    expectations {
                        name = expectations
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = expectations
                            }
                        }
                    }

                    background_knowledge = renderlet:HIDDEN
                    background_knowledge {
                        name = background_knowledge
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = background_knowledge
                            }
                        }
                    }

                    known_from = renderlet:HIDDEN
                    known_from {
                        name = known_from
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = known_from
                            }
                        }
                    }

                    notes = renderlet:HIDDEN
                    notes {
                        name = notes
                        process.userobj {
                            extension = this
                            method = hasRegistrationFormField
                            params {
                                10.name = elementname
                                10.value = notes
                            }
                        }
                    }

                    next_page = renderlet:HIDDEN
                    next_page {
                        name = next_page
                        validators {
                            10 = validator:STANDARD
                            10.custom.userobj {
                                extension = this
                                method = isLastPage
                            }
                        }
                    }
                }
            }
        }

        unregistration {
            meta {
                name = Seminar Manager unregistration form
                description = This form allows FE users to unregister for events.
                form.formid = tx_seminars_pi1_registration_editor
                debug = false
                displaylabels = false
            }

            control {
                datahandler = datahandler:RAW
                datahandler.parentcallback = processUnregistration

                renderer = renderer:TEMPLATE
                renderer.template {
                    path.userobj.php (
                            return \Tx_Oelib_ConfigurationRegistry::get('plugin.tx_seminars_pi1')->getAsString('registrationEditorTemplateFile');
                    )
                    subpart = ###REGISTRATION_EDITOR_UNREGISTRATION###
                    errortag = errors
                }

                actionlets {
                    10 = actionlet:REDIRECT
                    10.url.userobj {
                        extension = this
                        method = getPageToShowAfterUnregistrationUrl
                    }
                }
            }

            elements {
                button_cancel = renderlet:SUBMIT
                button_cancel {
                    name = button_cancel
                    label = ###LABEL_CANCEL###
                }

                button_unregister = renderlet:SUBMIT
                button_unregister {
                    name = button_unregister
                    label = ###LABEL_UNREGISTER###
                }
            }
        }
    }
}

plugin.tx_seminars_pi1.listView {
    # the default sort order in list view (a sort field name)
    orderBy = date

    # whether to order ascending (0) or descending (1)
    descFlag = 0

    # how many results to display per page
    results_at_a_time = 20

    # the number of neighboring pages to list in the page browser
    maxPages = 5
}

tx_seminars_pi2 = PAGE
tx_seminars_pi2 {
    # The page type number for the CSV export. Do not change this!
    typeNum = 736

    config {
        disableCharsetHeader = 1
        enableContentLengthHeader = 0
        no_cache = 1
        disableAllHeaderCode = 1
        admPanel = 0

        xhtml_cleaning >
    }

    includeLibs.tx_seminars_pi2 = EXT:seminars/Classes/Csv/CsvDownloader.php

    10 = USER
    10 {
        userFunc = \Tx_Seminars_Csv_CsvDownloader->main

        # pro forma salutation mode for the FE; has no effect whatsoever
        salutation = formal
    }
}

tx_seminars_publication = PAGE
tx_seminars_publication {
    # The page type number for the publish links. Do not change this!
    typeNum = 737

    config {
        enableContentLengthHeader = 1
        no_cache = 1
        doctype = xhtml_strict
        removeDefaultJS = 1
        setJS_openPic = 0
    }

    includeLibs.tx_seminars_publication = EXT:seminars/Classes/FrontEnd/PublishEvent.php
    stdWrap.wrap = <p>|</p>

    10 = USER
    10 {
        userFunc = \Tx_Seminars_FrontEnd_PublishEvent->render
        xhtml_cleaning = all
    }
}

page {
    includeCSS {
        tx_seminars_pi1 = {$plugin.tx_seminars_pi1.cssFile}
    }

    includeJSFooter {
        tx_seminars_pi1 = EXT:seminars/Resources/Public/JavaScript/FrontEnd/FrontEnd.js
        async = 1
    }
}

config {
    uniqueLinkVars = 1

    tx_mkforms {
        loadJsFramework = 1
        mayLoadScriptaculous = 1
        jsframework {
            jscore = jquery
            jscore.tx_mkforms_base = EXT:mkforms/res/jsfwk/prototype/addons/base/Base.js
            jscore.basewrapper = EXT:mkforms/res/jsfwk/wrapper.js
            jscore.wrapper = EXT:mkforms/res/jsfwk/jquery/wrapper.js
        }
    }
}

# Configuration for the (usually daily) registration digest email.
plugin.tx_seminars.registrationDigestEmail {
    # whether to send out the emails when the seminars Scheduler task is executed
    enable = 0

    # email address of the sender
    fromEmail =

    # name of the sender
    fromName =

    # email address of the recipient
    toEmail =

    # name of the recipient
    toName =

    # path to the fluid template for the plaintext email
    plaintextTemplate = EXT:seminars/Resources/Private/Templates/Mail/RegistrationDigest.txt

    # path to the fluid template for the HTML email
    htmlTemplate = EXT:seminars/Resources/Private/Templates/Mail/RegistrationDigest.html
}
